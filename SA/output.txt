Token: seperator        Lexeme: %%
Token: keyword        Lexeme: int
Token: identifier        Lexeme: i
Token: seperator        Lexeme: ,
Token: identifier        Lexeme: max
Token: seperator        Lexeme: ,
Token: identifier        Lexeme: sum
Token: seperator        Lexeme: ;
Token: identifier        Lexeme: sum
Token: operator        Lexeme: =
Token: integer        Lexeme: 0
Token: seperator        Lexeme: ;
Token: identifier        Lexeme: i
Token: operator        Lexeme: =
Token: integer        Lexeme: 1
Token: seperator        Lexeme: ;
Token: keyword        Lexeme: get
Token: seperator        Lexeme: (
Token: identifier        Lexeme: max
Token: seperator        Lexeme: )
Token: seperator        Lexeme: ;
Token: keyword        Lexeme: while
Token: seperator        Lexeme: (
Token: identifier        Lexeme: i
Token: operator        Lexeme: <
Token: identifier        Lexeme: max
Token: seperator        Lexeme: )
Token: seperator        Lexeme: {
Token: identifier        Lexeme: sum
Token: operator        Lexeme: =
Token: identifier        Lexeme: sum
Token: operator        Lexeme: +
Token: identifier        Lexeme: i
Token: seperator        Lexeme: ;
Token: identifier        Lexeme: i
Token: operator        Lexeme: =
Token: identifier        Lexeme: i
Token: operator        Lexeme: +
Token: integer        Lexeme: 1
Token: seperator        Lexeme: ;
Token: seperator        Lexeme: }
Token: keyword        Lexeme: put
Token: seperator        Lexeme: (
Token: identifier        Lexeme: sum
Token: operator        Lexeme: +
Token: identifier        Lexeme: max
Token: seperator        Lexeme: )
Token: seperator        Lexeme: ;
Token: seperator        Lexeme: %%
LEXER COMPLETE!
<Opt Function Definitions> ::= <Empty> 
<Qualifier> ::= int
<IDs> ::= <Identifier>
