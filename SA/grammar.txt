R0)   A' -> A
R1)   A  -> B %% J N %%
R2)   B  -> C | CC
R3)   C  -> D | D C //remove backtracking
R4)   D  -> function <Identifier> ( E ) J I
R5)   E  -> F | CC
R6)   F  -> G | G , F //remove backtracking
R7)   G  -> M H
R8)   H  -> int | boolean | real
R9)   I  -> { N }
R10)  J  -> K | CC
R11)  K  -> L ; | L ; K //remove backtracking
R12)  L  -> H M
R13)  M  -> <Identifier> | <Identifier>, M //remove backtracking
R14)  N  -> O | O N //remove backtracking
R15)  O  -> P | Q | R | S | T | U | V
R16)  P  -> { N }
R17)  Q  -> <Identifier> = Y ;
R18)  R  -> if ( W ) O fi | if ( W ) O otherwise O fi //remove backtracking
R19)  S  -> return ; | return Y ; // remove backtracking
R20)  T  -> put ( Y );
R21)  U  -> get ( M );
R22)  V  -> while ( W ) O
R23)  W  -> Y X Y
R24)  X  -> == | /= | > | < | => | <=
R25)  Y  -> Z Y'
R26)  Y' -> + Z Y' | - Z Y' | CC
R27)  Z -> AA Z'
R28)  Z' -> * AA Z' | / AA Z' | CC
R29)  AA -> - BB | BB
R30)  BB -> <Identifier> | <Integer> | <Identifier> ( M ) | ( Y ) | <Real> | true | false //remove backtracking
R31)  CC ->

R1. <Rat19F>  ::=   <Opt Function Definitions>   %%  <Opt Declaration List>  <Statement List>  %%
R2. <Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
R3. <Function Definitions>  ::= <Function> | <Function> <Function Definitions>
R4. <Function> ::= function  <Identifier>   ( <Opt Parameter List> )  <Opt Declaration List>  <Body>
R5. <Opt Parameter List> ::=  <Parameter List>    |     <Empty>
R6. <Parameter List>  ::=  <Parameter>    |     <Parameter> , <Parameter List>
R7. <Parameter> ::=  <IDs >  <Qualifier>
R8. <Qualifier> ::= int     |    boolean    |  real
R9. <Body>  ::=  {  < Statement List>  }
R10. <Opt Declaration List> ::= <Declaration List>   |    <Empty>
R11. <Declaration List>  := <Declaration> ;     |      <Declaration> ; <Declaration List>
R12. <Declaration> ::=   <Qualifier > <IDs>
R13. <IDs> ::=     <Identifier>    | <Identifier>, <IDs>
R14. <Statement List> ::=   <Statement>   | <Statement> <Statement List>
R15. <Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While>
R16. <Compound> ::=   {  <Statement List>  }
R17. <Assign> ::=     <Identifier> = <Expression> ;
R18. <If> ::=     if  ( <Condition>  ) <Statement>   fi   |
                          if  ( <Condition>  ) <Statement>   otherwise  <Statement>  fi
R19. <Return> ::=  return ; |  return <Expression> ;
R20. <Print> ::=    put ( <Expression>);
R21. <Scan> ::=    get ( <IDs> );
R22. <While> ::=  while ( <Condition>  )  <Statement>
R23. <Condition> ::=     <Expression>  <Relop>   <Expression>
R24. <Relop> ::=        ==   |   /=    |   >     |   <    |   =>    |   <=
R25. <Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
R25. <Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
R26. <Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <Factor>
R26. <Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <Factor>
R27. <Factor> ::=      -  <Primary>    |    <Primary>
R28. <Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |
                                     <Real>  |   true   |  false
R29. <Empty>   ::= 
Below is work for removing left recursion
############################################
Remove left recursion 1 & 3:
R25.1)  Y  -> Y + Z | Z
Y -> Z Y'
Y' -> + Z Y' | CC
Remove left recursion 2 & 3:
R25.2) Y -> Y - Z | Z
Y -> Z Y'
Y' -> - Z Y' | CC

Answer:
Y  -> Z Y'
Y' -> + Z Y' | - Z Y' | CC
